diff --git a/auto/modules b/auto/modules
index 300d07c..46a7877 100644
--- a/auto/modules
+++ b/auto/modules
@@ -421,6 +421,18 @@ if [ $HTTP = YES ]; then
 
     ngx_module_type=HTTP
 
+    if [ $HTTP_PLAIN = YES ]; then
+        have=NGX_HTTP_PLAIN . auto/have
+        ngx_module_name=
+        ngx_module_incs=
+        ngx_module_deps=
+        ngx_module_srcs=
+        ngx_module_libs=
+        ngx_module_link=$HTTP_PLAIN
+
+        . auto/module
+    fi
+
     if [ $HTTP_V2 = YES ]; then
         have=NGX_HTTP_V2 . auto/have
 
diff --git a/auto/options b/auto/options
index e6e0cd3..eb66522 100644
--- a/auto/options
+++ b/auto/options
@@ -59,6 +59,7 @@ NGX_HTTP_SCGI_TEMP_PATH=
 HTTP_CACHE=YES
 HTTP_CHARSET=YES
 HTTP_GZIP=YES
+HTTP_PLAIN=NO
 HTTP_SSL=NO
 HTTP_V2=NO
 HTTP_V3=NO
@@ -234,6 +235,7 @@ $0: warning: the \"--with-ipv6\" option is deprecated"
         --http-uwsgi-temp-path=*)        NGX_HTTP_UWSGI_TEMP_PATH="$value" ;;
         --http-scgi-temp-path=*)         NGX_HTTP_SCGI_TEMP_PATH="$value" ;;
 
+        --with-http_plain_module)        HTTP_PLAIN=YES             ;;
         --with-http_ssl_module)          HTTP_SSL=YES               ;;
         --with-http_v2_module)           HTTP_V2=YES                ;;
         --with-http_v3_module)           HTTP_V3=YES                ;;
@@ -455,6 +457,7 @@ cat << END
 
   --without-quic_bpf_module          disable ngx_quic_bpf_module
 
+  --with-http_plain_module           enable ngx_http_plain_module
   --with-http_ssl_module             enable ngx_http_ssl_module
   --with-http_v2_module              enable ngx_http_v2_module
   --with-http_v3_module              enable ngx_http_v3_module
diff --git a/src/http/ngx_http.c b/src/http/ngx_http.c
index d835f89..9aaa3e0 100644
--- a/src/http/ngx_http.c
+++ b/src/http/ngx_http.c
@@ -1235,6 +1235,9 @@ ngx_http_add_addresses(ngx_conf_t *cf, ngx_http_core_srv_conf_t *cscf,
     ngx_uint_t             i, default_server, proxy_protocol,
                            protocols, protocols_prev;
     ngx_http_conf_addr_t  *addr;
+#if (NGX_HTTP_PLAIN)
+    ngx_uint_t             plain;
+#endif
 #if (NGX_HTTP_SSL)
     ngx_uint_t             ssl;
 #endif
@@ -1275,6 +1278,9 @@ ngx_http_add_addresses(ngx_conf_t *cf, ngx_http_core_srv_conf_t *cscf,
         protocols = lsopt->proxy_protocol;
         protocols_prev = addr[i].opt.proxy_protocol;
 
+#if (NGX_HTTP_PLAIN)
+        plain = lsopt->plain || addr[i].opt.plain;
+#endif
 #if (NGX_HTTP_SSL)
         ssl = lsopt->ssl || addr[i].opt.ssl;
         protocols |= lsopt->ssl << 1;
@@ -1369,6 +1375,9 @@ ngx_http_add_addresses(ngx_conf_t *cf, ngx_http_core_srv_conf_t *cscf,
 
         addr[i].opt.default_server = default_server;
         addr[i].opt.proxy_protocol = proxy_protocol;
+#if (NGX_HTTP_PLAIN)
+        addr[i].opt.plain = plain;
+#endif
 #if (NGX_HTTP_SSL)
         addr[i].opt.ssl = ssl;
 #endif
@@ -1912,6 +1921,9 @@ ngx_http_add_addrs(ngx_conf_t *cf, ngx_http_port_t *hport,
         sin = (struct sockaddr_in *) addr[i].opt.sockaddr;
         addrs[i].addr = sin->sin_addr.s_addr;
         addrs[i].conf.default_server = addr[i].default_server;
+#if (NGX_HTTP_PLAIN)
+        addrs[i].conf.plain = addr[i].opt.plain;
+#endif
 #if (NGX_HTTP_SSL)
         addrs[i].conf.ssl = addr[i].opt.ssl;
 #endif
@@ -1980,6 +1992,9 @@ ngx_http_add_addrs6(ngx_conf_t *cf, ngx_http_port_t *hport,
         sin6 = (struct sockaddr_in6 *) addr[i].opt.sockaddr;
         addrs6[i].addr6 = sin6->sin6_addr;
         addrs6[i].conf.default_server = addr[i].default_server;
+#if (NGX_HTTP_PLAIN)
+        addrs6[i].conf.plain = addr[i].opt.plain;
+#endif
 #if (NGX_HTTP_SSL)
         addrs6[i].conf.ssl = addr[i].opt.ssl;
 #endif
diff --git a/src/http/ngx_http_core_module.c b/src/http/ngx_http_core_module.c
index 7845f8f..63c93fb 100644
--- a/src/http/ngx_http_core_module.c
+++ b/src/http/ngx_http_core_module.c
@@ -4170,6 +4170,18 @@ ngx_http_core_listen(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
             continue;
         }
 
+        if (ngx_strcmp(value[n].data, "plain") == 0) {
+#if (NGX_HTTP_PLAIN)
+            lsopt.plain = 1;
+            continue;
+#else
+            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                               "the \"plain\" parameter requires "
+                               "ngx_http_plain_module");
+            return NGX_CONF_ERROR;
+#endif
+        }
+
         if (ngx_strcmp(value[n].data, "ssl") == 0) {
 #if (NGX_HTTP_SSL)
             lsopt.ssl = 1;
diff --git a/src/http/ngx_http_core_module.h b/src/http/ngx_http_core_module.h
index 765e7ff..d4f5463 100644
--- a/src/http/ngx_http_core_module.h
+++ b/src/http/ngx_http_core_module.h
@@ -76,6 +76,9 @@ typedef struct {
     unsigned                   ssl:1;
     unsigned                   http2:1;
     unsigned                   quic:1;
+#if (NGX_HTTP_PLAIN)
+    unsigned                   plain:1;
+#endif
 #if (NGX_HAVE_INET6)
     unsigned                   ipv6only:1;
 #endif
@@ -240,6 +243,9 @@ struct ngx_http_addr_conf_s {
     unsigned                   ssl:1;
     unsigned                   http2:1;
     unsigned                   quic:1;
+#if (NGX_HTTP_PLAIN)
+    unsigned                   plain:1;
+#endif
     unsigned                   proxy_protocol:1;
 };
 
diff --git a/src/http/ngx_http_parse.c b/src/http/ngx_http_parse.c
index d4f2dae..d05ff3c 100644
--- a/src/http/ngx_http_parse.c
+++ b/src/http/ngx_http_parse.c
@@ -143,6 +143,21 @@ ngx_http_parse_request_line(ngx_http_request_t *r, ngx_buf_t *b)
         case sw_start:
             r->request_start = p;
 
+#if (NGX_HTTP_PLAIN)
+            if (r->plain_request) {
+                // Plain request starts with URL slash we injected
+                r->method = NGX_HTTP_GET;
+                r->uri_start = p;
+
+                if (ch != '/') {
+                    return NGX_HTTP_PARSE_INVALID_REQUEST;
+                }
+
+                state = sw_after_slash_in_uri;
+                break;
+            }
+#endif
+
             if (ch == CR || ch == LF) {
                 break;
             }
@@ -487,6 +502,13 @@ ngx_http_parse_request_line(ngx_http_request_t *r, ngx_buf_t *b)
 
             switch (ch) {
             case ' ':
+#if (NGX_HTTP_PLAIN)
+                if (r->plain_request) {
+                    // Allow spaces in plain request URL, use default behavior
+                    state = sw_check_uri;
+                    break;
+                }
+#endif
                 r->uri_end = p;
                 state = sw_http_09;
                 break;
@@ -560,6 +582,12 @@ ngx_http_parse_request_line(ngx_http_request_t *r, ngx_buf_t *b)
                 r->uri_ext = p + 1;
                 break;
             case ' ':
+#if (NGX_HTTP_PLAIN)
+                if (r->plain_request) {
+                    // Allow spaces in plain request URL, use default behavior
+                    break;
+                }
+#endif
                 r->uri_end = p;
                 state = sw_http_09;
                 break;
@@ -610,6 +638,12 @@ ngx_http_parse_request_line(ngx_http_request_t *r, ngx_buf_t *b)
 
             switch (ch) {
             case ' ':
+#if (NGX_HTTP_PLAIN)
+                if (r->plain_request) {
+                    // Allow spaces in plain request URL, use default behavior
+                    break;
+                }
+#endif
                 r->uri_end = p;
                 state = sw_http_09;
                 break;
@@ -804,6 +838,17 @@ done:
         r->request_end = p;
     }
 
+#if (NGX_HTTP_PLAIN)
+    if (r->plain_request) {
+        /* pretend that HTTP version is 0.9, so no response headers */
+        r->http_version = NGX_HTTP_VERSION_9;
+        r->method = NGX_HTTP_GET;
+        r->state = sw_start;
+
+        return NGX_OK;
+    }
+#endif
+
     r->http_version = r->http_major * 1000 + r->http_minor;
     r->state = sw_start;
 
diff --git a/src/http/ngx_http_request.c b/src/http/ngx_http_request.c
index bd2be5e..5093cfa 100644
--- a/src/http/ngx_http_request.c
+++ b/src/http/ngx_http_request.c
@@ -420,6 +420,16 @@ ngx_http_wait_request_handler(ngx_event_t *rev)
         b->end = b->last + size;
     }
 
+#if (NGX_HTTP_PLAIN)
+    if (hc->addr_conf->plain) {
+        /* inject a slash at request beginning */
+        if (b->last == b->start) {
+            *b->start = '/';
+            b->last++;
+        }
+    }
+#endif
+
     size = b->end - b->last;
 
     n = c->recv(c, b->last, size);
@@ -468,6 +478,13 @@ ngx_http_wait_request_handler(ngx_event_t *rev)
     if (hc->proxy_protocol) {
         hc->proxy_protocol = 0;
 
+#if (NGX_HTTP_PLAIN)
+        if (hc->addr_conf->plain) {
+            /* the first byte is our injected slash, skip it */
+            b->pos++;
+        }
+#endif
+
         p = ngx_proxy_protocol_read(c, b->pos, b->last);
 
         if (p == NULL) {
@@ -477,6 +494,14 @@ ngx_http_wait_request_handler(ngx_event_t *rev)
 
         b->pos = p;
 
+#if (NGX_HTTP_PLAIN)
+        if (hc->addr_conf->plain) {
+            /* re-inject the slash */
+            b->pos = p - 1;
+            *b->pos = '/';
+        }
+#endif
+
         if (b->pos == b->last) {
             c->log->action = "waiting for request";
             b->pos = b->start;
@@ -654,6 +679,10 @@ ngx_http_alloc_request(ngx_connection_t *c)
 
     r->log_handler = ngx_http_log_error_handler;
 
+#if (NGX_HTTP_PLAIN)
+    r->plain_request = hc->addr_conf->plain;
+#endif
+
     return r;
 }
 
@@ -1126,6 +1155,21 @@ ngx_http_process_request_line(ngx_event_t *rev)
             ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0,
                            "http request line: \"%V\"", &r->request_line);
 
+#if (NGX_HTTP_PLAIN)
+            if (r->plain_request) {
+                r->method_name.len = 3;
+                r->method_name.data = (u_char*) "GET";
+
+                if (ngx_http_process_request_uri(r) != NGX_OK) {
+                    break;
+                }
+
+                ngx_http_process_request(r);
+
+                break;
+            }
+#endif
+
             r->method_name.len = r->method_end - r->request_start + 1;
             r->method_name.data = r->request_line.data;
 
diff --git a/src/http/ngx_http_request.h b/src/http/ngx_http_request.h
index cc3b7c0..cbbc49c 100644
--- a/src/http/ngx_http_request.h
+++ b/src/http/ngx_http_request.h
@@ -568,6 +568,10 @@ struct ngx_http_request_s {
     unsigned                          background:1;
     unsigned                          health_check:1;
 
+#if (NGX_HTTP_PLAIN)
+    unsigned                          plain_request:1;
+#endif
+
     /* used to parse HTTP headers */
 
     ngx_uint_t                        state;
