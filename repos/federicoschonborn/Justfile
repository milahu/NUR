just := just_executable()

export NIX_FLAGS := env("NIX_FLAGS", "")

[private]
@default:
    {{ just }} --list

# Build all packages against both channels.
build-all: build-all-unstable build-all-stable

# Build all packages against the unstable channel.
build-all-unstable:
    nom build -L ${NIX_FLAGS[@]} --no-link --impure --expr 'import ./ci.nix { pkgs = import (builtins.getFlake "nixpkgs") { }; }' cacheOutputs --inputs-from .

# Build all packages against the stable channel.
build-all-stable:
    nom build -L ${NIX_FLAGS[@]} --no-link --impure --expr 'import ./ci.nix { pkgs = import (builtins.getFlake "nixpkgs-stable") { }; }' cacheOutputs --inputs-from .

# Rebuild all packages against both channels.
rebuild-all: rebuild-all-unstable rebuild-all-stable

# Rebuild all packages against the unstable channel.
rebuild-all-unstable:
    @env NIX_FLAGS="$NIX_FLAGS --rebuild" {{ just }} build-all

# Rebuild all packages against the stable branch.
rebuild-all-stable:
    @env NIX_FLAGS="$NIX_FLAGS --rebuild" {{ just }} build-all-stable

# Build one or more packages against both channels.
build +PACKAGES: (build-unstable PACKAGES) (build-stable PACKAGES)

# Build one or more packages against the unstable channel.
build-unstable +PACKAGES:
    PACKAGES="{{ PACKAGES }}"; nom build -L ${NIX_FLAGS[@]} $(echo ".#${PACKAGES// / .#}")

# Build one or more packages against the stable channel.
build-stable +PACKAGES:
    @env NIX_FLAGS="$NIX_FLAGS --inputs-from . --override-input nixpkgs nixpkgs-stable" {{ just }} build-unstable {{ PACKAGES }}

# Rebuild one or more packages against both channels.
rebuild +PACKAGES: (rebuild-unstable PACKAGES) (rebuild-stable PACKAGES)

# Rebuild one or more packages against the unstable channel.
rebuild-unstable +PACKAGES:
    @env NIX_FLAGS="$NIX_FLAGS --rebuild" {{ just }} build {{ PACKAGES }}

# Rebuild one or more packages against the stable channel.
rebuild-stable +PACKAGES:
    @env NIX_FLAGS="$NIX_FLAGS --rebuild" {{ just }} build-stable {{ PACKAGES }}

run-unstable PACKAGE:
    nix run --log-format internal-json -v ".#{{ PACKAGE }}" ${NIX_FLAGS[@]} |& nom --json

run-stable PACKAGE:
    @env NIX_FLAGS="$NIX_FLAGS --inputs-from . --override-input nixpkgs nixpkgs-stable" {{ just }} run {{ PACKAGE }}

tree PACKAGE: (build PACKAGE)
    nix-tree ".#{{ PACKAGE }}"

inspect:
    nix-inspect --path .
