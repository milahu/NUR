error:
… from call site

  at ./default.nix:10:10:

     9|   overlays = import ./overlays; # Nixpkgs overlays
    10|   pkgs = recurseIntoAttrs
      |          ^
    11|     (import ./pkgs { inherit pkgs; inherit (self) libExtension; });

… while calling 'recurseIntoAttrs'

  at ./default.nix:3:24:

     2|
     3| let recurseIntoAttrs = attrs: attrs // { recurseForDerivations = true; };
      |                        ^
     4| self = {

… from call site

  at ./default.nix:11:6:

    10|   pkgs = recurseIntoAttrs
    11|     (import ./pkgs { inherit pkgs; inherit (self) libExtension; });
      |      ^
    12| }; in if enablePkgsCompat then self.pkgs // self else self

… while calling anonymous lambda

  at ./pkgs/default.nix:1:1:

     1| { pkgs, libExtension }:
      | ^
     2|

… from call site

  at ./pkgs/default.nix:47:27:

    46|
    47| in let p = pkgs'; pkgs' = pkgs.appendOverlays [
      |                           ^
    48|   (pkgs: super: {

… while calling 'appendOverlays'

  at <nixpkgs> + /pkgs/top-level/stage.nix:292:22:

   291|     # in one go when calling Nixpkgs, for performance and simplicity.
   292|     appendOverlays = extraOverlays:
      |                      ^
   293|       if extraOverlays == []

… from call site

  at <nixpkgs> + /pkgs/top-level/stage.nix:295:12:

   294|       then self
   295|       else nixpkgsFun { overlays = args.overlays ++ extraOverlays; };
      |            ^
   296|

… while calling 'nixpkgsFun'

  at <nixpkgs> + /pkgs/top-level/default.nix:128:16:

   127|   # experience here.)
   128|   nixpkgsFun = newArgs: import ./. (args // newArgs);
      |                ^
   129|

… from call site

  at <nixpkgs> + /pkgs/top-level/default.nix:128:25:

   127|   # experience here.)
   128|   nixpkgsFun = newArgs: import ./. (args // newArgs);
      |                         ^
   129|

… while calling anonymous lambda

  at <nixpkgs> + /pkgs/top-level/default.nix:19:1:

    18|
    19| { # The system packages will be built on. See the manual for the
      | ^
    20|   # subtle division of labor between these two `*System`s and the three

… from call site

  at <nixpkgs> + /pkgs/top-level/default.nix:144:4:

   143|
   144| in checked pkgs
      |    ^
   145|

… while calling anonymous lambda

  at <nixpkgs> + /pkgs/top-level/default.nix:58:108:

    57|     throwIfNot (lib.isList crossOverlays) "The crossOverlays argument to nixpkgs must be a list."
    58|     lib.foldr (x: throwIfNot (lib.isFunction x) "All crossOverlays passed to nixpkgs must be functions.") (r: r) crossOverlays
      |                                                                                                            ^
    59|     ;

… from call site

  at <nixpkgs> + /pkgs/top-level/default.nix:142:10:

   141|
   142|   pkgs = boot stages;
      |          ^
   143|

… while calling anonymous lambda

  at <nixpkgs> + /pkgs/stdenv/booter.nix:42:1:

    41| # other words, this does a foldr not foldl.
    42| stageFuns:
      | ^
    43| let

… from call site

  at <nixpkgs> + /pkgs/stdenv/booter.nix:166:1:

   165| in
   166| dfold folder postStage (_: { }) withAllowCustomOverrides
      | ^
   167|

… while calling 'dfold'

  at <nixpkgs> + /pkgs/stdenv/booter.nix:63:21:

    62|   dfold =
    63|     op: lnul: rnul: list:
      |                     ^
    64|     let

… from call site

  at <nixpkgs> + /pkgs/stdenv/booter.nix:78:13:

    77|       lapp = lnul cur;
    78|       cur = go lapp 0;
      |             ^
    79|     in

… while calling 'go'

  at <nixpkgs> + /pkgs/stdenv/booter.nix:67:15:

    66|       go =
    67|         pred: n:
      |               ^
    68|         if n == len then

… from call site

  at <nixpkgs> + /pkgs/stdenv/booter.nix:73:19:

    72|             # Note the cycle -- call-by-need ensures finite fold.
    73|             cur = op pred (builtins.elemAt list n) succ;
      |                   ^
    74|             succ = go cur (n + 1);

… while calling 'folder'

  at <nixpkgs> + /pkgs/stdenv/booter.nix:96:26:

    95|   folder =
    96|     nextStage: stageFun: prevStage:
      |                          ^
    97|     let

… from call site

  at <nixpkgs> + /pkgs/stdenv/booter.nix:98:14:

    97|     let
    98|       args = stageFun prevStage;
      |              ^
    99|       args' = args // {

… while calling anonymous lambda

  at <nixpkgs> + /pkgs/stdenv/booter.nix:86:22:

    85|   withAllowCustomOverrides = lib.lists.imap1 (
    86|     index: stageFun: prevStage:
      |                      ^
    87|     # So true by default for only the first element because one

… from call site

  at <nixpkgs> + /pkgs/stdenv/booter.nix:90:48:

    89|     # for the final stage.
    90|     { allowCustomOverrides = index == 1; } // (stageFun prevStage)
      |                                                ^
    91|   ) (lib.lists.reverseList stageFuns);

… while calling anonymous lambda

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:912:5:

   911|   (
   912|     prevStage:
      |     ^
   913|     # previous stage5 stdenv; see stage3 comment regarding gcc,

… from call site

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:915:12:

   914|     # which applies here as well.
   915|     assert isBuiltByNixpkgsCompiler prevStage.binutils-unwrapped;
      |            ^
   916|     assert isBuiltByNixpkgsCompiler prevStage.${localSystem.libc};

… while calling 'isBuiltByNixpkgsCompiler'

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:125:30:

   124|   isFromBootstrapFiles = pkg: pkg.passthru.isFromBootstrapFiles or false;
   125|   isBuiltByNixpkgsCompiler = pkg: isFromNixpkgs pkg && isFromNixpkgs pkg.stdenv.cc.cc;
      |                              ^
   126|   isBuiltByBootstrapFilesCompiler = pkg: isFromNixpkgs pkg && isFromBootstrapFiles pkg.stdenv.cc.cc;

… from call site

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:125:35:

   124|   isFromBootstrapFiles = pkg: pkg.passthru.isFromBootstrapFiles or false;
   125|   isBuiltByNixpkgsCompiler = pkg: isFromNixpkgs pkg && isFromNixpkgs pkg.stdenv.cc.cc;
      |                                   ^
   126|   isBuiltByBootstrapFilesCompiler = pkg: isFromNixpkgs pkg && isFromBootstrapFiles pkg.stdenv.cc.cc;

… while calling 'isFromNixpkgs'

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:123:19:

   122|
   123|   isFromNixpkgs = pkg: !(isFromBootstrapFiles pkg);
      |                   ^
   124|   isFromBootstrapFiles = pkg: pkg.passthru.isFromBootstrapFiles or false;

… from call site

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:123:26:

   122|
   123|   isFromNixpkgs = pkg: !(isFromBootstrapFiles pkg);
      |                          ^
   124|   isFromBootstrapFiles = pkg: pkg.passthru.isFromBootstrapFiles or false;

… while calling 'isFromBootstrapFiles'

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:124:26:

   123|   isFromNixpkgs = pkg: !(isFromBootstrapFiles pkg);
   124|   isFromBootstrapFiles = pkg: pkg.passthru.isFromBootstrapFiles or false;
      |                          ^
   125|   isBuiltByNixpkgsCompiler = pkg: isFromNixpkgs pkg && isFromNixpkgs pkg.stdenv.cc.cc;

… from call site

  at <nixpkgs> + /pkgs/stdenv/booter.nix:74:20:

    73|             cur = op pred (builtins.elemAt list n) succ;
    74|             succ = go cur (n + 1);
      |                    ^
    75|           in

… while calling 'go'

  at <nixpkgs> + /pkgs/stdenv/booter.nix:67:15:

    66|       go =
    67|         pred: n:
      |               ^
    68|         if n == len then

… from call site

  at <nixpkgs> + /pkgs/stdenv/booter.nix:73:19:

    72|             # Note the cycle -- call-by-need ensures finite fold.
    73|             cur = op pred (builtins.elemAt list n) succ;
      |                   ^
    74|             succ = go cur (n + 1);

… while calling 'folder'

  at <nixpkgs> + /pkgs/stdenv/booter.nix:96:26:

    95|   folder =
    96|     nextStage: stageFun: prevStage:
      |                          ^
    97|     let

… from call site

  at <nixpkgs> + /pkgs/stdenv/booter.nix:98:14:

    97|     let
    98|       args = stageFun prevStage;
      |              ^
    99|       args' = args // {

… while calling anonymous lambda

  at <nixpkgs> + /pkgs/stdenv/booter.nix:86:22:

    85|   withAllowCustomOverrides = lib.lists.imap1 (
    86|     index: stageFun: prevStage:
      |                      ^
    87|     # So true by default for only the first element because one

… from call site

  at <nixpkgs> + /pkgs/stdenv/booter.nix:90:48:

    89|     # for the final stage.
    90|     { allowCustomOverrides = index == 1; } // (stageFun prevStage)
      |                                                ^
    91|   ) (lib.lists.reverseList stageFuns);

… while calling anonymous lambda

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:723:5:

   722|   (
   723|     prevStage:
      |     ^
   724|     # previous stage4 stdenv; see stage3 comment regarding gcc,

… from call site

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:726:12:

   725|     # which applies here as well.
   726|     assert isBuiltByNixpkgsCompiler prevStage.binutils-unwrapped;
      |            ^
   727|     assert isBuiltByNixpkgsCompiler prevStage.${localSystem.libc};

… while calling 'isBuiltByNixpkgsCompiler'

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:125:30:

   124|   isFromBootstrapFiles = pkg: pkg.passthru.isFromBootstrapFiles or false;
   125|   isBuiltByNixpkgsCompiler = pkg: isFromNixpkgs pkg && isFromNixpkgs pkg.stdenv.cc.cc;
      |                              ^
   126|   isBuiltByBootstrapFilesCompiler = pkg: isFromNixpkgs pkg && isFromBootstrapFiles pkg.stdenv.cc.cc;

… from call site

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:125:35:

   124|   isFromBootstrapFiles = pkg: pkg.passthru.isFromBootstrapFiles or false;
   125|   isBuiltByNixpkgsCompiler = pkg: isFromNixpkgs pkg && isFromNixpkgs pkg.stdenv.cc.cc;
      |                                   ^
   126|   isBuiltByBootstrapFilesCompiler = pkg: isFromNixpkgs pkg && isFromBootstrapFiles pkg.stdenv.cc.cc;

… while calling 'isFromNixpkgs'

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:123:19:

   122|
   123|   isFromNixpkgs = pkg: !(isFromBootstrapFiles pkg);
      |                   ^
   124|   isFromBootstrapFiles = pkg: pkg.passthru.isFromBootstrapFiles or false;

… from call site

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:123:26:

   122|
   123|   isFromNixpkgs = pkg: !(isFromBootstrapFiles pkg);
      |                          ^
   124|   isFromBootstrapFiles = pkg: pkg.passthru.isFromBootstrapFiles or false;

… while calling 'isFromBootstrapFiles'

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:124:26:

   123|   isFromNixpkgs = pkg: !(isFromBootstrapFiles pkg);
   124|   isFromBootstrapFiles = pkg: pkg.passthru.isFromBootstrapFiles or false;
      |                          ^
   125|   isBuiltByNixpkgsCompiler = pkg: isFromNixpkgs pkg && isFromNixpkgs pkg.stdenv.cc.cc;

… from call site

  at <nixpkgs> + /pkgs/stdenv/booter.nix:74:20:

    73|             cur = op pred (builtins.elemAt list n) succ;
    74|             succ = go cur (n + 1);
      |                    ^
    75|           in

… while calling 'go'

  at <nixpkgs> + /pkgs/stdenv/booter.nix:67:15:

    66|       go =
    67|         pred: n:
      |               ^
    68|         if n == len then

… from call site

  at <nixpkgs> + /pkgs/stdenv/booter.nix:73:19:

    72|             # Note the cycle -- call-by-need ensures finite fold.
    73|             cur = op pred (builtins.elemAt list n) succ;
      |                   ^
    74|             succ = go cur (n + 1);

… while calling 'folder'

  at <nixpkgs> + /pkgs/stdenv/booter.nix:96:26:

    95|   folder =
    96|     nextStage: stageFun: prevStage:
      |                          ^
    97|     let

… from call site

  at <nixpkgs> + /pkgs/stdenv/booter.nix:98:14:

    97|     let
    98|       args = stageFun prevStage;
      |              ^
    99|       args' = args // {

… while calling anonymous lambda

  at <nixpkgs> + /pkgs/stdenv/booter.nix:86:22:

    85|   withAllowCustomOverrides = lib.lists.imap1 (
    86|     index: stageFun: prevStage:
      |                      ^
    87|     # So true by default for only the first element because one

… from call site

  at <nixpkgs> + /pkgs/stdenv/booter.nix:90:48:

    89|     # for the final stage.
    90|     { allowCustomOverrides = index == 1; } // (stageFun prevStage)
      |                                                ^
    91|   ) (lib.lists.reverseList stageFuns);

… while calling anonymous lambda

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:649:5:

   648|   (
   649|     prevStage:
      |     ^
   650|     # previous stage3 stdenv:

… from call site

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:651:12:

   650|     # previous stage3 stdenv:
   651|     assert isBuiltByNixpkgsCompiler prevStage.binutils-unwrapped;
      |            ^
   652|     assert isBuiltByNixpkgsCompiler prevStage.${localSystem.libc};

… while calling 'isBuiltByNixpkgsCompiler'

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:125:30:

   124|   isFromBootstrapFiles = pkg: pkg.passthru.isFromBootstrapFiles or false;
   125|   isBuiltByNixpkgsCompiler = pkg: isFromNixpkgs pkg && isFromNixpkgs pkg.stdenv.cc.cc;
      |                              ^
   126|   isBuiltByBootstrapFilesCompiler = pkg: isFromNixpkgs pkg && isFromBootstrapFiles pkg.stdenv.cc.cc;

… from call site

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:125:56:

   124|   isFromBootstrapFiles = pkg: pkg.passthru.isFromBootstrapFiles or false;
   125|   isBuiltByNixpkgsCompiler = pkg: isFromNixpkgs pkg && isFromNixpkgs pkg.stdenv.cc.cc;
      |                                                        ^
   126|   isBuiltByBootstrapFilesCompiler = pkg: isFromNixpkgs pkg && isFromBootstrapFiles pkg.stdenv.cc.cc;

… while calling 'isFromNixpkgs'

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:123:19:

   122|
   123|   isFromNixpkgs = pkg: !(isFromBootstrapFiles pkg);
      |                   ^
   124|   isFromBootstrapFiles = pkg: pkg.passthru.isFromBootstrapFiles or false;

… from call site

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:123:26:

   122|
   123|   isFromNixpkgs = pkg: !(isFromBootstrapFiles pkg);
      |                          ^
   124|   isFromBootstrapFiles = pkg: pkg.passthru.isFromBootstrapFiles or false;

… while calling 'isFromBootstrapFiles'

  at <nixpkgs> + /pkgs/stdenv/linux/default.nix:124:26:

   123|   isFromNixpkgs = pkg: !(isFromBootstrapFiles pkg);
   124|   isFromBootstrapFiles = pkg: pkg.passthru.isFromBootstrapFiles or false;
      |                          ^
   125|   isBuiltByNixpkgsCompiler = pkg: isFromNixpkgs pkg && isFromNixpkgs pkg.stdenv.cc.cc;

… from call site

  at <nixpkgs> + /lib/trivial.nix:1000:7:

   999|     { # TODO: Should we add call-time "type" checking like built in?
  1000|       __functor = self: f;
      |       ^
  1001|       __functionArgs = args;

… while calling anonymous lambda

  at <nixpkgs> + /lib/customisation.nix:159:7:

   158|     mirrorArgs (
   159|       origArgs:
      |       ^
   160|       let

… from call site

  at <nixpkgs> + /lib/customisation.nix:161:18:

   160|       let
   161|         result = f origArgs;
      |                  ^
   162|

… while calling anonymous lambda

  at <nixpkgs> + /pkgs/build-support/cc-wrapper/default.nix:8:1:

     7|
     8| { name ? ""
      | ^
     9| , lib

… while evaluating derivation 'glibc-2.40-36'
  whose name attribute is located at <nixpkgs> + /pkgs/stdenv/generic/make-derivation.nix:375:7

… while evaluating attribute 'nativeBuildInputs' of derivation 'glibc-2.40-36'

  at <nixpkgs> + /pkgs/stdenv/generic/make-derivation.nix:419:7:

   418|       depsBuildBuild              = elemAt (elemAt dependencies 0) 0;
   419|       nativeBuildInputs           = elemAt (elemAt dependencies 0) 1;
      |       ^
   420|       depsBuildTarget             = elemAt (elemAt dependencies 0) 2;

… while calling anonymous lambda

  at <nixpkgs> + /pkgs/stdenv/generic/make-derivation.nix:346:13:

   345|       (map (drv: getDev drv.__spliced.buildBuild or drv) (checkDependencyList "depsBuildBuild" depsBuildBuild))
   346|       (map (drv: getDev drv.__spliced.buildHost or drv) (checkDependencyList "nativeBuildInputs" nativeBuildInputs'))
      |             ^
   347|       (map (drv: getDev drv.__spliced.buildTarget or drv) (checkDependencyList "depsBuildTarget" depsBuildTarget))

… from call site

  at <nixpkgs> + /pkgs/stdenv/generic/make-derivation.nix:346:18:

   345|       (map (drv: getDev drv.__spliced.buildBuild or drv) (checkDependencyList "depsBuildBuild" depsBuildBuild))
   346|       (map (drv: getDev drv.__spliced.buildHost or drv) (checkDependencyList "nativeBuildInputs" nativeBuildInputs'))
      |                  ^
   347|       (map (drv: getDev drv.__spliced.buildTarget or drv) (checkDependencyList "depsBuildTarget" depsBuildTarget))

… while calling 'getOutput'

  at <nixpkgs> + /lib/attrsets.nix:1796:23:

  1795|   */
  1796|   getOutput = output: pkg:
      |                       ^
  1797|     if ! pkg ? outputSpecified || ! pkg.outputSpecified

… while calling anonymous lambda

  at <nixpkgs> + /lib/lists.nix:334:29:

   333|   */
   334|   imap1 = f: list: genList (n: f (n + 1) (elemAt list n)) (length list);
      |                             ^
   335|

… from call site

  at <nixpkgs> + /lib/lists.nix:334:32:

   333|   */
   334|   imap1 = f: list: genList (n: f (n + 1) (elemAt list n)) (length list);
      |                                ^
   335|

… while calling anonymous lambda

  at <nixpkgs> + /pkgs/stdenv/generic/make-derivation.nix:320:15:

   319|     imap1
   320|       (index: dep:
      |               ^
   321|         if isDerivation dep || dep == null || builtins.isString dep || builtins.isPath dep then dep

… from call site

  at <nixpkgs> + /pkgs/stdenv/generic/make-derivation.nix:321:12:

   320|       (index: dep:
   321|         if isDerivation dep || dep == null || builtins.isString dep || builtins.isPath dep then dep
      |            ^
   322|         else if isList dep then checkDependencyList' ([index] ++ positions) name dep

… while calling 'isDerivation'

  at <nixpkgs> + /lib/attrsets.nix:1282:5:

  1281|   isDerivation =
  1282|     value: value.type or null == "derivation";
      |     ^
  1283|

… from call site

  at ./pkgs/default.nix:22:6:

    21|       }; in self;
    22|   in attachScope (self: super: { }) (self:
      |      ^
    23|     # override the `pkgs` used in `with pkgs;` to access `callPackage`

… while calling 'attachScope'

  at ./pkgs/default.nix:15:22:

    14|     # (fixed points permanently bend your brain)
    15|     attachScope = f: genSelf:
      |                      ^
    16|       let self = genSelf self // {

… from call site

  at ./pkgs/default.nix:16:18:

    15|     attachScope = f: genSelf:
    16|       let self = genSelf self // {
      |                  ^
    17|         overrideScope' = g: attachScope (composeExtensions f g) genSelf;

… while calling anonymous lambda

  at ./pkgs/default.nix:22:38:

    21|       }; in self;
    22|   in attachScope (self: super: { }) (self:
      |                                      ^
    23|     # override the `pkgs` used in `with pkgs;` to access `callPackage`

… from call site

  at <nixpkgs> + /lib/trivial.nix:1000:7:

   999|     { # TODO: Should we add call-time "type" checking like built in?
  1000|       __functor = self: f;
      |       ^
  1001|       __functionArgs = args;

… while calling anonymous lambda

  at <nixpkgs> + /lib/customisation.nix:167:36:

   166|         # Re-call the function but with different arguments
   167|         overrideArgs = mirrorArgs (newArgs: makeOverridable f (overrideWith newArgs));
      |                                    ^
   168|         # Change the result of the function call by applying g to it

… from call site

  at <nixpkgs> + /lib/trivial.nix:1000:7:

   999|     { # TODO: Should we add call-time "type" checking like built in?
  1000|       __functor = self: f;
      |       ^
  1001|       __functionArgs = args;

… while calling anonymous lambda

  at <nixpkgs> + /lib/customisation.nix:159:7:

   158|     mirrorArgs (
   159|       origArgs:
      |       ^
   160|       let

error: function 'anonymous lambda' called with unexpected argument 'pkgs'

at <nixpkgs> + /pkgs/development/interpreters/python/default.nix:1:1:

     1| { __splicedPackages
      | ^
     2| , callPackage
