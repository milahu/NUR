trace: warning: swift-mesonlsp-bin has been renamed to mesonlsp-bin
trace: warning: lua-dev.nvim has been renamed to neodev.nvim
trace: warning: null-ls.nvim has been discontinued, consider switching to none-ls.nvim
error:
… from call site

  at ./pkgs/default.nix:48:19:

    47|     vimPlugins = callPackages ./vimPlugins;
    48|     xplrPlugins = callPackages ./xplrPlugins;
      |                   ^
    49|     zrythm = callPackage' ./zrythm;

… while calling 'callPackages'

  at ./pkgs/default.nix:8:18:

     7|
     8|   callPackages = pkg: pkgs.lib.recurseIntoAttrs (callPackage' pkg);
      |                  ^
     9|

… from call site

  at ./pkgs/default.nix:8:23:

     7|
     8|   callPackages = pkg: pkgs.lib.recurseIntoAttrs (callPackage' pkg);
      |                       ^
     9|

… while calling 'recurseIntoAttrs'

  at <nixpkgs> + /lib/attrsets.nix:1973:5:

  1972|   recurseIntoAttrs =
  1973|     attrs:
      |     ^
  1974|     attrs // { recurseForDerivations = true; };

… from call site

  at ./pkgs/default.nix:8:50:

     7|
     8|   callPackages = pkg: pkgs.lib.recurseIntoAttrs (callPackage' pkg);
      |                                                  ^
     9|

… while calling 'callPackage''

  at ./pkgs/default.nix:2:18:

     1| {pkgs, ...}: let
     2|   callPackage' = pkg:
      |                  ^
     3|     pkgs.callPackage pkg {

… from call site

  at ./pkgs/default.nix:3:5:

     2|   callPackage' = pkg:
     3|     pkgs.callPackage pkg {
      |     ^
     4|       inherit pkgs callPackage';

… while calling 'callPackageWith'

  at <nixpkgs> + /lib/customisation.nix:212:35:

   211|   */
   212|   callPackageWith = autoArgs: fn: args:
      |                                   ^
   213|     let

… from call site

  at <nixpkgs> + /lib/trivial.nix:895:7:

   894|     { # TODO: Should we add call-time "type" checking like built in?
   895|       __functor = self: f;
      |       ^
   896|       __functionArgs = args;

… while calling anonymous lambda

  at <nixpkgs> + /lib/customisation.nix:136:17:

   135|     in
   136|     mirrorArgs (origArgs:
      |                 ^
   137|     let

… from call site

  at <nixpkgs> + /lib/customisation.nix:138:16:

   137|     let
   138|       result = f origArgs;
      |                ^
   139|

… while calling anonymous lambda

  at ./pkgs/xplrPlugins/default.nix:1:1:

     1| {pkgs, ...}: let
      | ^
     2|   sources = import ./nix/_sources.nix {inherit pkgs;};

… from call site

  at ./pkgs/xplrPlugins/default.nix:4:4:

     3| in
     4|   (pkgs.lib.makeExtensible
      |    ^
     5|     (_:

… while calling 'makeExtensibleWithCustomName'

  at <nixpkgs> + /lib/fixed-points.nix:393:48:

   392|   */
   393|   makeExtensibleWithCustomName = extenderName: rattrs:
      |                                                ^
   394|     fix' (self: (rattrs self) // {

… from call site

  at <nixpkgs> + /lib/fixed-points.nix:394:5:

   393|   makeExtensibleWithCustomName = extenderName: rattrs:
   394|     fix' (self: (rattrs self) // {
      |     ^
   395|       ${extenderName} = f: makeExtensibleWithCustomName extenderName (extends f rattrs);

… while calling 'fix''

  at <nixpkgs> + /lib/fixed-points.nix:109:10:

   108|   */
   109|   fix' = f: let x = f x // { __unfix__ = f; }; in x;
      |          ^
   110|

… from call site

  at <nixpkgs> + /lib/fixed-points.nix:109:21:

   108|   */
   109|   fix' = f: let x = f x // { __unfix__ = f; }; in x;
      |                     ^
   110|

… while calling anonymous lambda

  at <nixpkgs> + /lib/fixed-points.nix:394:11:

   393|   makeExtensibleWithCustomName = extenderName: rattrs:
   394|     fix' (self: (rattrs self) // {
      |           ^
   395|       ${extenderName} = f: makeExtensibleWithCustomName extenderName (extends f rattrs);

… from call site

  at <nixpkgs> + /lib/fixed-points.nix:394:18:

   393|   makeExtensibleWithCustomName = extenderName: rattrs:
   394|     fix' (self: (rattrs self) // {
      |                  ^
   395|       ${extenderName} = f: makeExtensibleWithCustomName extenderName (extends f rattrs);

… while calling anonymous lambda

  at ./pkgs/xplrPlugins/default.nix:5:6:

     4|   (pkgs.lib.makeExtensible
     5|     (_:
      |      ^
     6|       pkgs.lib.mapAttrs' (name: src:

… from call site

  at ./pkgs/xplrPlugins/default.nix:6:7:

     5|     (_:
     6|       pkgs.lib.mapAttrs' (name: src:
      |       ^
     7|         pkgs.lib.nameValuePair

… while calling 'mapAttrs''

  at <nixpkgs> + /lib/attrsets.nix:1057:5:

  1056|     f:
  1057|     set:
      |     ^
  1058|     listToAttrs (map (attr: f attr set.${attr}) (attrNames set));

… from call site

  at ./pkgs/xplrPlugins/default.nix:17:8:

    16|         }))
    17|       (pkgs.lib.filterAttrs (_: v: pkgs.lib.isStorePath v) sources)))
      |        ^
    18|   .extend (pkgs.callPackage ./_overrides.nix {})

… while calling 'filterAttrs'

  at <nixpkgs> + /lib/attrsets.nix:646:5:

   645|     pred:
   646|     set:
      |     ^
   647|     listToAttrs (concatMap (name: let v = set.${name}; in if pred name v then [(nameValuePair name v)] else []) (attrNames set));

… while calling anonymous lambda

  at <nixpkgs> + /lib/attrsets.nix:647:29:

   646|     set:
   647|     listToAttrs (concatMap (name: let v = set.${name}; in if pred name v then [(nameValuePair name v)] else []) (attrNames set));
      |                             ^
   648|

… from call site

  at <nixpkgs> + /lib/attrsets.nix:647:62:

   646|     set:
   647|     listToAttrs (concatMap (name: let v = set.${name}; in if pred name v then [(nameValuePair name v)] else []) (attrNames set));
      |                                                              ^
   648|

… while calling anonymous lambda

  at ./pkgs/xplrPlugins/default.nix:17:33:

    16|         }))
    17|       (pkgs.lib.filterAttrs (_: v: pkgs.lib.isStorePath v) sources)))
      |                                 ^
    18|   .extend (pkgs.callPackage ./_overrides.nix {})

… from call site

  at ./pkgs/xplrPlugins/default.nix:17:36:

    16|         }))
    17|       (pkgs.lib.filterAttrs (_: v: pkgs.lib.isStorePath v) sources)))
      |                                    ^
    18|   .extend (pkgs.callPackage ./_overrides.nix {})

… while calling 'isStorePath'

  at <nixpkgs> + /lib/strings.nix:1023:17:

  1022|   */
  1023|   isStorePath = x:
      |                 ^
  1024|     if isStringLike x then

… from call site

  at ./pkgs/xplrPlugins/nix/_sources.nix:208:33:

   207|           "The values in sources.json should not have an 'outPath' attribute"
   208|         else spec // {outPath = replace name (fetch config.pkgs name spec);}
      |                                 ^
   209|     )

… while calling 'replace'

  at ./pkgs/xplrPlugins/nix/_sources.nix:124:19:

   123|   # the path directly as opposed to the fetched source.
   124|   replace = name: drv: let
      |                   ^
   125|     saneName = stringAsChars (c:

… from call site

  at ./pkgs/xplrPlugins/nix/_sources.nix:208:47:

   207|           "The values in sources.json should not have an 'outPath' attribute"
   208|         else spec // {outPath = replace name (fetch config.pkgs name spec);}
      |                                               ^
   209|     )

… while calling 'fetch'

  at ./pkgs/xplrPlugins/nix/_sources.nix:105:23:

   104|   # The actual fetching function.
   105|   fetch = pkgs: name: spec:
      |                       ^
   106|     if ! builtins.hasAttr "type" spec

… from call site

  at ./pkgs/xplrPlugins/nix/_sources.nix:113:10:

   112|     else if spec.type == "git"
   113|     then fetch_git pkgs name spec
      |          ^
   114|     else if spec.type == "local"

… while calling 'fetch_git'

  at ./pkgs/xplrPlugins/nix/_sources.nix:22:27:

    21|
    22|   fetch_git = pkgs: name: spec: let
      |                           ^
    23|     ref =

error: attribute 'fetchGit' missing

at ./pkgs/xplrPlugins/nix/_sources.nix:51:5:

    50|   in
    51|     pkgs.fetchGit
      |     ^
    52|     ({
Did you mean one of fetchgit, fetchit or fetchzip?
